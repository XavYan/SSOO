#!/bin/bash

# sysinfo_page - Un script que informa del estado del sistema (actualizado para la practica de la semana 9)

# Declaracion de variables
filename=~/system_info.txt
interactive=0
TITLE="Información de mi sistema"
RIGHT_NOW=$(date +"%x %r%Z")
TIME_STAMP="Actualizada el $RIGHT_NOW por $USER"

##### Estilos

TEXT_BOLD=$(tput bold)
TEXT_GREEN=$(tput setaf 2)
TEXT_RESET=$(tput sgr0)
TEXT_ULINE=$(tput sgr 0 1)

##### Funciones
system_info() {
  echo "${TEXT_ULINE}Versión del sistema${TEXT_RESET}"
  echo
  uname -a
  echo "----------------------------------------------------------------------------"
}

show_uptime() {
  echo "${TEXT_ULINE}Tiempo de encendido del sistema${TEXT_RESET}"
  echo
  uptime
  echo "----------------------------------------------------------------------------"
}

drive_space() {
  echo "${TEXT_ULINE}Espacio ocupado en disco${TEXT_RESET}"
  echo
  df -BM
  echo "----------------------------------------------------------------------------"
}

user_process() {
  echo "${TEXT_BOLD}Numero de procesos del usuario${TEXT_RESET}: $(ps -u $USER --no-headers | wc -l)"
  echo "----------------------------------------------------------------------------"
}

home_space() {
  echo "${TEXT_ULINE}Espacio usado en disco e información de usuarios${TEXT_RESET}"
  echo
  if [ $USER = root ]; then
    echo "${TEXT_BOLD}ESPACIO USADO${TEXT_RESET} en /home"
    echo
    du -s -BM /home/* | sort -nr
  else
    echo "${TEXT_BOLD}ESPACIO USADO${TEXT_RESET} en /home/$USER"
    echo "  $(du -s -BM /home/$USER)"
  fi
  echo
  echo "  ${TEXT_ULINE}USUARIOS${TEXT_RESET}"
  if [ $USER != $LOGNAME ]; then
    echo "  El usuario original no coincidente con el usuario actual"
    echo "  El ${TEXT_BOLD}usuario original${TEXT_RESET} es ${TEXT_BOLD}$LOGNAME${TEXT_RESET}"
    echo "  El ${TEXT_BOLD}usuario actual${TEXT_RESET} es ${TEXT_BOLD}$USER${TEXT_RESET}"
  else
    echo "  El usuario original coincide con el usuario actual"
    echo "  El ${TEXT_BOLD}usuario original${TEXT_RESET} es ${TEXT_BOLD}$LOGNAME${TEXT_RESET}"
  fi
  echo
  echo "  ${TEXT_ULINE}NUMERO DE PROCESOS${TEXT_RESET}"
  echo "  ${TEXT_BOLD}Número de procesos${TEXT_RESET} que se ejecutan hasta el momento actual: $(ps --no-headers | wc -l)"
  echo "----------------------------------------------------------------------------"
}

usage() {
  echo "usage: sysinfo [-f file] [-i] [-h]"
}

write_page() {
  echo "write_page iniciada"
cat << _EOF_
    === $TEXT_BOLD $TITLE $HOSTNAME $TEXT_RESET ===

  $(system_info)
  $(show_uptime)
  $(drive_space)
  $(home_space)
  $(user_process)

  $TEXT_GREEN $TIME_STAMP $TEXT_RESET
_EOF_

echo
}

##### Programa principal

echo "filename inicial = " $filename

# PROCESAMIENTO DE LA LINEA DE COMANDOS
while [ "$1" != "" ]; do
  case $1 in
    -f | --file )
      shift
      filename=$1
      echo "Opcion -f encontrada"
      ;;
    -i | --interactive )
      echo "Opcion -i encontrada"
      interactive=1
      ;;
    -h | --help )
      echo "Opcion -h encontrada"
      usage
      exit
      ;;
    * )
      echo "Opcion no registrada"
      usage
      exit 1
  esac
  shift
done
echo "realizado el procesamiento de la linea de comandos..."

if [ $interactive -eq 1 ]; then
  echo -n "Indica el nombre del fichero de salida (por defecto es $filename) >> "
  read text
  echo "El fichero indicado es $text..."
  if [ ! -d $text ]; then
    if [ -e $text ]; then
      echo -n "El fichero ya existe, desea sobrescribirlo? (S/n): "
      read text2
      case $text2 in
        S | s )
          echo "Eleccion hecha con si."
          filename=$text
          ;;
        N | n )
          echo "Eleccion hecha con no."
          ;;
        * )
          echo "Error. Se debe especificar lo puesto entre paréntesis. Script abortado."
          exit 1
      esac
    else
      filename=$text
    fi
  else
    echo "Error. No debe ser un directorio."
    exit 1
  fi
fi

echo "Valor de filename: "$filename

#write_page > $filename

exit 0
