#!/bin/bash

# sysinfo_page - Un script que informa del estado del sistema (actualizado para la practica de la semana 9)

# Declaracion de variables
filename=~/system_info.txt
interactive=0
show=0
filter=
sysUser=0

TITLE="Información de mi sistema"
RIGHT_NOW=$(date +"%x %r%Z")
TIME_STAMP="Actualizada el $RIGHT_NOW por $USER"

##### Estilos

TEXT_BOLD=$(tput bold)
TEXT_GREEN=$(tput setaf 2)
TEXT_RESET=$(tput sgr0)
TEXT_ULINE=$(tput sgr 0 1)

##### Funciones
system_info() {
  echo "${TEXT_ULINE}Versión del sistema${TEXT_RESET}"
  echo
  uname -a
  echo "----------------------------------------------------------------------------"
}

show_uptime() {
  echo "${TEXT_ULINE}Tiempo de encendido del sistema${TEXT_RESET}"
  echo
  uptime
  echo "----------------------------------------------------------------------------"
}

drive_space() {
  echo "${TEXT_ULINE}Espacio ocupado en disco${TEXT_RESET}"
  echo
  if [ -n "$1" ]; then
    echo "${TEXT_BOLD}Filtrado con ${TEXT_ULINE}$1${TEXT_RESET}"
    echo
  fi
  temp=$(df | grep "$1" | wc -l) #Aqui $temp cuenta el numero de procesos que hay que mostrar (incluyendo la cabecera )
  if [ $temp -ne 0 ]; then
    echo -n ${TEXT_BOLD}
    df | head -n1
    echo -n ${TEXT_RESET}
    df -BM | tail -n$(($(df | wc -l) - 1)) | grep "$1"
  fi
  temp= #Reiniciamos el valor de $temp
  echo "----------------------------------------------------------------------------"
}

user_process() {
  echo -n "${TEXT_BOLD}Numero de procesos del usuario${TEXT_RESET}:"
  ps -u $USER --no-headers | wc -l
  echo "----------------------------------------------------------------------------"
}

home_space() {
  echo "${TEXT_ULINE}Espacio usado en disco e información de usuarios${TEXT_RESET}"
  echo
  if [ $USER = root ]; then
    echo "${TEXT_BOLD}ESPACIO USADO${TEXT_RESET} en /home"
    echo
    du -s -BM /home/* | sort -nr
  else
    echo "${TEXT_BOLD}ESPACIO USADO${TEXT_RESET} en /home/$USER"
    echo "  $(du -s -BM /home/$USER)"
  fi
  echo
  echo "  ${TEXT_ULINE}USUARIOS${TEXT_RESET}"
  if [ $USER != $LOGNAME ]; then
    echo "  El usuario original no coincidente con el usuario actual"
    echo "  El ${TEXT_BOLD}usuario original${TEXT_RESET} es ${TEXT_BOLD}$LOGNAME${TEXT_RESET}"
    echo "  El ${TEXT_BOLD}usuario actual${TEXT_RESET} es ${TEXT_BOLD}$USER${TEXT_RESET}"
  else
    echo "  El usuario original coincide con el usuario actual"
    echo "  El ${TEXT_BOLD}usuario original${TEXT_RESET} es ${TEXT_BOLD}$LOGNAME${TEXT_RESET}"
  fi
  echo
  echo "  ${TEXT_ULINE}NUMERO DE PROCESOS${TEXT_RESET}"
  echo "  ${TEXT_BOLD}Número de procesos${TEXT_RESET} que se ejecutan hasta el momento actual: $(ps --no-headers | wc -l)"
  echo "----------------------------------------------------------------------------"
}

usage() {
  echo "usage: sysinfo [-f file] [-i] [-h] [-p filter] [-s]"
}

write_page() {
cat << _EOF_
    === $TEXT_BOLD $TITLE $HOSTNAME $TEXT_RESET ===
  $(system_info)
  $(show_uptime)
  $(drive_space $filter)
  $(home_space)
  $(user_process)
  $(demon_process)

  $TEXT_GREEN $TIME_STAMP $TEXT_RESET
_EOF_

echo
}

demon_process() {
    echo -e "${TEXT_ULINE}Procesos demonio${TEXT_RESET}\n"
    ps u | head -n1
    for i in $(ps -A --no-headers | sed 's/^ *//' | cut -d " " -f1); do
      sysUser=0
      for j in $(echo $(ls $HOME/../) root); do
        if [ "$(ps u --pid $i --no-headers | cut -d " " -f1)" = "$j" ]; then
          sysUser=1
          break
        fi
      done
      if [ $sysUser -eq 0 ]; then
        ps u --pid $i --no-headers
      fi
    done
}

##### Programa principal

# PROCESAMIENTO DE LA LINEA DE COMANDOS
while [ "$1" != "" ]; do
  case $1 in
    -f | --file ) # indicar un fichero
      shift
      filename=$1
      ;;
    -i | --interactive ) # Indicar el fichero durante la ejecucion
      interactive=1
      ;;
    -p | --partitions-filter ) #Filtrar la informacion del espacio en disco
      shift
      filter=$1
      ;;
    -s | --show ) # Mostrar por pantalla la informacion
      show=1
      ;;
    -h | --help ) # Mostrar la ayuda
      usage
      exit 0
      ;;
    * )
      usage
      exit 1
  esac
  shift
done

# Si es interactivo (-i) entonces preguntamos al usario por el fichero
if [ $interactive -eq 1 ]; then
  echo -n "Indica el nombre del fichero de salida (actualmente es $filename) >> "
  read text
  echo "El fichero indicado es $text..."
  if [ ! -d $text ]; then
    if [ -e $text ]; then
      echo -n "El fichero ya existe, desea sobrescribirlo? (S/n): "
      read text2
      case $text2 in
        S | s )
          filename=$text
          ;;
        N | n )
          echo "Operación abortada..."
          exit 0
          ;;
        * )
          echo "Error. Se debe especificar lo puesto entre paréntesis. Script abortado." 1>&2
          exit 1
      esac
    else
      filename=$text
    fi
  else
    echo "Error. No debe ser un directorio." 1>&2
    exit 1
  fi
fi

echo "Cargando información..."

if [ $show -eq 1 ]; then
  write_page
fi

write_page > $filename

echo "Información guardada en $filename."
echo

exit 0
